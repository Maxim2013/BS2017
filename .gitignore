#include <sys/ipc.h>
  3         #include <sys/shm.h>
  4         #include <sys/types.h>
  5         #include <sys/socket.h>
  6         #include <netinet/in.h> //Adressfamilie
  7         #include <arpa/inet.h>
  8         #include <unistd.h>
  9         #include <stdio.h>
 10         #include <stdlib.h>
 11         #include <string.h>
 12         #define BUF 2000
 13         #define SERVER_PORT 4711 
 14 
 15         int strtoken(char *str, char *separator, char **token, int size);
 16 
 17         int main()
 18         {
 19         int sock, new_sock;
 20         socklen_t addrlen;
 21         ssize_t size, string;
 22         struct sockaddr_in sin;
 23         key_t key;
 24         int shmid;  //shared memory ID
 25         char *shm;
 26         char *buffer = malloc(BUF);
 27         char *quit = "quit";
 28         char *get = "GET";
 29         char *put = "PUT";
 30         char *del = "DEL";
 31         char **result = malloc(80);
 32 
 33 
 34         shmid = shmget(IPC_PRIVATE, sizeof(BUF), IPC_CREAT | 0777);
 35         if(shmid < 0)
 36         {
 37                 perror("shmget");
 38                 exit(1);
 39         }
 40 
 41         if( (shm = shmat(shmid, NULL, 0)) == (char *) -1  )
 42         {
 43                 perror("shmat");
 44                 exit(1);
 45         }
 46 
 47         // Initialisieren vom struct sin mit geeigneten Werten
 48         int sin_len = sizeof(sin);
 49         sin.sin_family = AF_INET;
 50         sin.sin_addr.s_addr = INADDR_ANY;
 51         sin.sin_port = htons(4711); // 4711 ist die Portangabe konvertiert einen short integer vom host byte zu einer netzwerk byte
 52 
 53         // Socket erzeugen
 54 
 55         sock = socket(AF_INET, SOCK_STREAM, 0);
 
 if( sock > 0 ){
 58 
 59         printf("Socket (%i) wurde angelegt!\n", sock);
 60         }
 61         else
 62                 perror("Socket konnte nicht angelegt werden");
 63 
 64         // Socket binden
 65         if( bind(sock, (struct sockaddr *)& sin, sizeof(sin)) == 0  )
 66         {
 67         printf("Socket (%i) wurde gebunden!\n", sock);
 68         }
 69         else
 70         {
 71         printf("Der Port ist nicht frei - belegt!\n");
 72         }
 73 
 74         // Socket lauscht auf eingehende Verbindungen
 75         listen(sock, 4);
 76 
 77         while(1){
 78 
 79         new_sock = accept(sock, (struct sockaddr *) &sin, &addrlen);
 80 
 81         if(fork() == 0){
 82 
 83         if(new_sock > 0){
 84 
 85                 printf("Der Client %s ist verbunden ...\n", inet_ntoa(sin.sin_addr));
 86           close(sock);
 87         }
 88         while(strncmp(buffer, quit, 4) != 0){
 89         string = recv(new_sock, buffer, BUF-1, 0);
 90 
 91         if(size > 0){
 92         buffer[size] = '\0';
 93         }
 94 
 95         printf("Nachricht erhalten: %s", buffer);
 96 
 97         if( strncmp(buffer, get, 3) == 0)
 98         {
 99         printf("GET Funktion !\n");
100 
101         } else if( strncmp(buffer, put, 3) == 0)
102         {
103                 printf("PUT Funktion !\n");
104 
105         int count = strtoken(buffer, " ", result, 3);
106         for (int i = 0; i <= count; i++)
107         {
108                 printf("Ergebnis: %s\n", result[i]);
109         }
110         } else if(strncmp(buffer, del, 3) == 0){
111         printf("DELETE Funktion !\n");

} else {
114         printf("klappt nicht\n");
115         }
116         }
117         }
118 
119         close(new_sock);
120         }
121 
122         // Socket schliessen
123         //return (EXIT_SUCCESS);
124 
125 
126 }
127         int strtoken(char *str, char *separator, char **token, int size)
128         {
129         int i=0;
130         token[0] = strtok(str, separator);
131         while(token[i++] && i < size)
132         token[i] = strtok(NULL, separator);
133         return (i);
134         }
                         
