#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <strings.h>
#include "function2.h"

#define SERVER_PORT 4411
#define SHSIZEOF 1024

int main(int argc, char*argv[]){
  int sock, new_socket;
  socklen_t addrlen;
  ssize_t size, string;
  struct sockaddr_in sin;
  int shmid, mem_del;
  char* shm;
  char result;
  struct data* share_mem;

  //Initializing struct from sin with value//

  int sin_len = sizeof(sin);
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = INADDR_ANY;
  sin.sin_port = htons(SERVER_PORT);

   //Creating socket//

  sock = socket(AF_INET, SOCK_STREAM, 0);
  if (sock > 0){
    printf("Socket %i wurde angelegt \n", sock);
  }
  else{
    perror("Socket konnte nicht angelegt werden“);
  }
  //Binding Socket//
  if (bind(sock, (struct sockaddr *)&sin, sizeof(sin))==0){
    printf("Socket %i wurde gebunden\n", sock);
    }
    else {
    perror("Bitte schauen sie nochmal nach dem Port!");
    }
   //Socket listening//
    
   listen(sock, 4);
 
   //Begin of fork and put/get/del/
  
  int e = 1;
  char input[1024];
  char command[10]; //PUT GET DEL oder EXIT
  char key[30];
  char value[30];
  char res[2000];
  char* begruesung = "Verwenden sie bitte eine der Funktionen PUT(key value), GET(key); DEL(key) oder beenden sie die Kommunikation mit EXIT\n";
  char* teil;
  
  //erzeugen und anlegen des Shared Memory//
 
  shmid = shmget (IPC_PRIVATE, SHSIZEOF, IPC_CREAT | 0777  );
    if (shmid < 0){
      perror("Fehler");
      exit(1);
      }
  
  //anbinden versuch//

    share_mem = (struct data*)shmat(shmid, 0, 0);
      if( share_mem == (void*) -1) {
        perror("shmat");
        exit(1);
        }
    daten = share_mem;
  
    while(1){
    new_socket = accept(sock,(struct sockaddr *) &sin, &addrlen);

      if(fork() == 0){
        if(new_socket > 0);{    // Vater
          printf("Der Client ist mit %s verbunden worden\n", inet_ntoa(sin.sin_addr) );
          //      write(new_socket, begruesung,strlen(begruesung));
          printf("nach begruessung %d\n", (int)strlen(begruesung) );
              while(2){
              e = 1;
              bzero(input, 1024);
              bzero(key, 30);
              bzero(value, 30);

              read(new_socket, input, K);
              input[strlen(input)-2]='\0'; //

              teil = strtok(input, " ");
              printf("%s%d\n", teil, strlen(teil));

              strcpy(command,teil);
              printf("%s%d\n", command, strlen(command))    ;
 
              teil = strtok(NULL," ");
              printf("%s%d\n", teil, strlen(teil));
 
              strcpy(key,teil);
              printf("%s%d\n", key, strlen(key));

              teil = strtok(NULL, '\0');
              printf("%s%d\n", teil, strlen(teil));
 
              teil = strcpy(value,teil);
              printf("%s%d\n", value, strlen(value));
            //fflush(stdout); //erzwingt eine ausgabe 
              
            //geht die command durch und vergleicht welche eingabe erfolgt ist
              if(strcmp(command,"PUT")==0){
              put(key, value, res);
              printf("%s\n",res);
              write(new_socket, res,strlen(res))    ;
              }
              else if(strcmp(command, "GET")==0    ){
              get(key, res);
              printf("%s\n",res);
              strcat(res,"\n");
              write(new_socket, res,strlen(res));
              }
              else if(strcmp(command, "DEL")==0){
              del(key, res);
              printf("%s\n",res);
              strcat(res, "\n");
              write(new_socket,     res,strlen(res));
              }
              else if(strcmp(command, "EXIT")==0){
              strcpy(res,"Adios Muchacho\n");
              write(new_socket, res,strlen(res));
              close(new_socket);
    
    //Shared Memory entfernen
      shmdt(share_mem);
      e = 0;
      }
      else {printf("falsche eingabe\n");
      strcpy(res,"falsche eingabe\n");
      write(new_socket, res,strlen(res));
      exit (0);
      }
    }
   } //ende vom Kindprozess
  }
 close(new_socket);
 }
    //Shared Memory löschen
      mem_del = shmctl(shmid, IPC_RMID, 0); // IPC_RMID löscht --> buffer = 0
      if (result == -1)
        printf ("Fehler bei shmctl() shmid %d, Kommando %d\n", shmid, IPC_RMID);
        return 0;
}

